var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.716,1,2.24]],["body/controllers/AppController.html",[0,1.662,1,2.169,2,0.993,3,0.153,4,0.133,5,0.133,6,1.777,7,0.24,8,1.237,9,2.682,10,4.492,11,3.259,12,3.793,13,4.492,14,3.259,15,2.752,16,1.882,17,3.259,18,2.184,19,0.026,20,2.104,21,1.014,22,2.104,23,2.035,24,2.25,25,2.104,26,3.567,27,2.104,28,2.104,29,1.705,30,1.388,31,0.528,32,1.705,33,4.802,34,2.104,35,1.076,36,2.104,37,2.104,38,2.104,39,2.104,40,2.104,41,2.104,42,2.104,43,2.104,44,2.104,45,2.104,46,2.104,47,0.497,48,1.777,49,2.104,50,0.53,51,1.777,52,1.272,53,2.207,54,1.777,55,1.4,56,2.104,57,2.104,58,1.073,59,2.104,60,1.4,61,2.104,62,2.104,63,0.153,64,0.094,65,0.993,66,1.073,67,2.035,68,2.104,69,2.104,70,3.989,71,3.989,72,2.104,73,2.104,74,3.259,75,1.969,76,4.492,77,2.104,78,2.104,79,2.104,80,2.104,81,2.104,82,2.104,83,1.777,84,2.104,85,2.104,86,0.008,87,0.012,88,0.008]],["title/modules/AppModule.html",[89,1.474,90,2.24]],["body/modules/AppModule.html",[1,3.374,2,2.082,3,0.231,4,0.201,5,0.201,19,0.026,47,0.567,50,0.8,53,3.298,54,2.683,63,0.231,64,0.142,86,0.012,87,0.017,88,0.012,89,2.22,90,4.345,91,1.62,92,1.62,93,1.92,94,1.92,95,1.62,96,3.064,97,1.92,98,2.683,99,2.683,100,2.683,101,3.601,102,3.601,103,3.601,104,2.667,105,1.92,106,1.92,107,3.177,108,2.937,109,2.357,110,2.114,111,3.177,112,3.177,113,3.177,114,3.177,115,3.177]],["title/injectables/AppService.html",[53,1.863,116,0.972]],["body/injectables/AppService.html",[3,0.316,4,0.275,5,0.275,7,0.496,8,2.06,12,5.233,19,0.026,21,0.821,23,1.649,35,1.463,47,0.403,50,1.094,53,3.002,63,0.316,64,0.194,67,1.649,86,0.017,87,0.021,88,0.017,116,1.567,117,2.215,118,3.668,119,4.344,120,4.344,121,4.344]],["title/controllers/AuthController.html",[0,1.716,122,2.24]],["body/controllers/AuthController.html",[0,1.487,2,1.376,3,0.212,4,0.184,5,0.184,7,0.333,8,1.577,16,2.734,18,1.693,19,0.026,21,0.786,23,1.577,24,2.31,29,1.577,30,1.284,31,0.673,32,1.577,47,0.517,50,0.734,63,0.212,64,0.13,65,1.376,66,1.487,67,1.577,86,0.011,87,0.016,88,0.011,122,2.765,123,2.462,124,2.462,125,2.916,126,3.591,127,3.509,128,2.916,129,3.51,130,4.155,131,4.155,132,2.916,133,4.895,134,2.916,135,3.51,136,4.155,137,2.916,138,3.509,139,2.462,140,1.614,141,2.916,142,2.916,143,2.916,144,2.468,145,2.916,146,2.916,147,4.155,148,2.118,149,2.765,150,1.762,151,2.916,152,2.916,153,1.376,154,2.511,155,2.916]],["title/modules/AuthModule.html",[89,1.474,101,2.034]],["body/modules/AuthModule.html",[2,2.116,3,0.237,4,0.206,5,0.206,19,0.026,47,0.557,50,0.819,63,0.237,64,0.145,86,0.012,87,0.017,88,0.012,89,2.248,91,1.659,92,1.659,93,1.966,94,1.966,95,1.659,96,3.103,97,1.966,101,3.787,104,2.711,105,1.966,106,1.966,108,2.985,122,3.417,144,3.06,156,2.747,157,2.747,158,2.747,159,3.627,160,3.253,161,4.486,162,3.253,163,2.165,164,3.253,165,2.985,166,3.253,167,3.253,168,3.253,169,3.253,170,3.253,171,3.253,172,3.253,173,3.253,174,3.253,175,2.747,176,3.253,177,3.253,178,3.253]],["title/injectables/AuthService.html",[116,0.972,144,1.716]],["body/injectables/AuthService.html",[3,0.11,4,0.096,5,0.096,7,0.173,8,0.951,9,2.093,16,2.093,19,0.026,21,0.703,23,0.951,24,1.628,29,1.215,30,1.371,31,0.602,32,1.215,35,1.639,47,0.455,50,0.381,63,0.11,64,0.068,65,0.714,66,2.262,67,0.951,75,2.681,86,0.006,87,0.01,88,0.006,116,0.723,117,0.772,126,2.375,127,2.115,140,2.598,144,1.277,148,2.902,149,2.13,150,1.513,153,2.093,154,1.935,163,1.008,179,1.124,180,0.774,181,3.056,182,3.14,183,0.838,184,1.515,185,3.746,186,2.703,187,1.896,188,3.965,189,2.504,190,1.515,191,1.515,192,2.115,193,2.703,194,1.515,195,0.838,196,0.772,197,3.251,198,2.115,199,1.279,200,1.279,201,1.124,202,1.279,203,1.279,204,1.279,205,1.784,206,0.915,207,1.279,208,1.124,209,1.858,210,1.008,211,0.915,212,1.279,213,0.838,214,1.666,215,1.181,216,1.279,217,1.279,218,1.279,219,1.279,220,1.279,221,1.279,222,2.115,223,2.741,224,1.279,225,1.279,226,1.279,227,1.279,228,1.279,229,1.279,230,3.056,231,1.279,232,1.279,233,1.279,234,1.279,235,1.279,236,2.115,237,4.299,238,1.858,239,2.115,240,2.703,241,1.279,242,1.279,243,1.279,244,1.279,245,1.279,246,1.008,247,2.115,248,1.279,249,2.115,250,1.279,251,1.279,252,1.279,253,1.279,254,1.279,255,1.279,256,1.279,257,1.279,258,1.279,259,1.279,260,1.124,261,2.115,262,1.124,263,1.279,264,1.124,265,1.279,266,1.279,267,1.279]],["title/classes/BCryptUtils.html",[64,0.15,211,2.034]],["body/classes/BCryptUtils.html",[3,0.213,4,0.185,5,0.185,7,0.334,8,1.581,9,2.738,16,1.965,19,0.026,21,0.917,23,1.581,24,2.314,29,1.581,30,1.287,31,0.786,32,1.581,35,1.675,47,0.271,63,0.213,64,0.131,67,1.581,86,0.011,87,0.016,88,0.011,180,1.287,181,3.598,195,1.62,196,1.492,211,2.517,268,0.789,269,2.471,270,6.21,271,4.85,272,4.166,273,4.901,274,2.445,275,3.091,276,2.927,277,4.166,278,2.927,279,4.166,280,4.166,281,5.584,282,2.927,283,2.927,284,3.091,285,4.85,286,2.927,287,2.927,288,2.927]],["title/classes/CreateWishDto.html",[64,0.15,289,2.034]],["body/classes/CreateWishDto.html",[3,0.316,4,0.275,5,0.275,7,0.496,18,1.77,19,0.026,21,0.821,31,0.704,35,1.463,47,0.403,63,0.316,64,0.242,86,0.017,87,0.021,88,0.017,180,1.677,268,1.172,289,3.278,290,4.025,291,3.223,292,4.39,293,4.581,294,3.668,295,2.891,296,2.625]],["title/injectables/FacebookStrategy.html",[103,2.034,116,0.972]],["body/injectables/FacebookStrategy.html",[3,0.295,4,0.178,5,0.178,7,0.321,8,1.538,9,2.239,19,0.026,21,0.766,23,1.069,24,1.774,29,1.069,30,1.467,31,0.456,32,1.069,35,1.545,47,0.44,50,0.709,52,1.701,63,0.205,64,0.126,86,0.011,87,0.016,88,0.011,103,2.448,116,1.17,117,1.435,148,2.42,150,2.868,153,1.911,183,2.627,205,1.467,297,2.378,298,4.008,299,2.816,300,2.816,301,4.746,302,6.041,303,4.746,304,4.052,305,2.816,306,2.816,307,4.052,308,2.816,309,2.378,310,2.378,311,2.378,312,2.089,313,3.421,314,1.435,315,2.378,316,2.378,317,2.816,318,2.816,319,2.816,320,2.816,321,2.816,322,2.816,323,2.816,324,2.816,325,4.052,326,4.746,327,2.816,328,2.816,329,2.816,330,2.816,331,2.816,332,3.421,333,2.816]],["title/injectables/JwtAuthGuard.html",[60,2.24,116,0.972]],["body/injectables/JwtAuthGuard.html",[3,0.336,4,0.292,5,0.292,19,0.026,47,0.522,50,1.162,51,3.896,52,2.788,60,3.747,63,0.336,64,0.206,86,0.018,87,0.022,88,0.018,116,1.626,117,2.352,314,2.352,334,3.896,335,3.896,336,4.614]],["title/classes/JwtStrategy.html",[64,0.15,165,2.24]],["body/classes/JwtStrategy.html",[3,0.255,4,0.222,5,0.222,7,0.4,8,1.792,9,2.517,19,0.026,21,0.892,23,1.331,29,1.331,30,1.083,31,0.568,32,1.331,47,0.529,52,2.118,63,0.255,64,0.156,67,1.331,86,0.013,87,0.018,88,0.013,165,3.14,175,2.959,183,2.953,205,1.083,206,2.118,268,0.945,298,3.985,310,2.959,311,2.959,312,2.6,314,1.787,315,2.959,316,2.959,332,3.985,337,2.959,338,3.505,339,4.72,340,3.799,341,3.505,342,3.505,343,3.985,344,3.505,345,3.505,346,3.505,347,3.505,348,3.505,349,3.505,350,3.505]],["title/classes/JwtUtils.html",[64,0.15,351,2.498]],["body/classes/JwtUtils.html",[3,0.362,4,0.315,5,0.315,19,0.025,63,0.362,64,0.222,86,0.019,87,0.023,88,0.019,268,1.343,351,4.374,352,4.205]],["title/classes/PayloadJwtDto.html",[64,0.15,340,2.24]],["body/classes/PayloadJwtDto.html",[3,0.305,4,0.265,5,0.265,7,0.478,19,0.026,21,0.792,30,1.294,31,0.859,35,1.43,47,0.388,58,2.703,63,0.305,64,0.187,86,0.016,87,0.02,88,0.016,153,1.976,180,1.639,205,1.798,215,1.976,246,2.787,268,1.129,274,1.834,340,3.528,353,4.477,354,3.536,355,4.188,356,4.188,357,3.536,358,3.536,359,3.107]],["title/interfaces/ReponseGraphApi.html",[213,1.863,214,2.24]],["body/interfaces/ReponseGraphApi.html",[3,0.122,4,0.106,5,0.106,7,0.191,9,1.281,16,1.281,19,0.027,24,1.189,30,1.437,31,0.703,35,1.693,47,0.473,50,0.421,63,0.122,64,0.075,65,0.789,66,2.013,67,1.031,75,2.811,86,0.006,87,0.01,88,0.006,116,0.784,126,1.241,140,2.712,144,0.853,148,2.977,149,1.113,150,1.011,153,2.408,154,2.073,163,1.113,179,1.241,180,0.84,181,2.545,182,1.413,185,2.896,186,1.413,187,1.385,188,2.896,192,1.413,193,1.413,197,3.278,198,1.413,199,1.413,200,1.413,201,1.241,202,1.413,203,1.413,204,1.413,205,1.828,206,1.011,207,1.413,208,1.241,209,2.016,210,1.113,211,1.011,212,1.413,213,0.926,214,2.282,215,2.048,216,3.334,217,3.334,218,1.413,219,1.413,220,1.413,221,1.413,222,2.294,223,2.889,224,1.413,225,1.413,226,1.413,227,1.413,228,1.413,229,1.413,230,3.222,231,1.413,232,1.413,233,1.413,234,1.413,235,1.413,236,2.294,237,4.457,238,2.016,239,2.294,240,2.896,241,1.413,242,1.413,243,1.413,244,1.413,245,1.413,246,1.113,247,2.294,248,1.413,249,2.294,250,1.413,251,1.413,252,1.413,253,1.413,254,1.413,255,1.413,256,1.413,257,1.413,258,1.413,259,1.413,260,1.241,261,2.294,262,1.241,263,1.413,264,1.241,265,1.413,266,1.413,267,1.413,360,1.241]],["title/interfaces/RequestFBUser.html",[26,2.24,213,1.863]],["body/interfaces/RequestFBUser.html",[3,0.33,4,0.287,5,0.287,7,0.518,19,0.025,26,3.709,31,0.735,63,0.33,86,0.017,87,0.021,88,0.017,133,4.706,180,1.722,205,1.945,213,2.511,314,2.842,360,3.366,361,3.831,362,4.476]],["title/classes/RequestLoginByAcessTokenFBDto.html",[64,0.15,129,2.24]],["body/classes/RequestLoginByAcessTokenFBDto.html",[3,0.299,4,0.26,5,0.26,7,0.468,18,2.132,19,0.026,21,0.99,31,0.848,35,1.637,47,0.381,63,0.299,64,0.234,86,0.016,87,0.02,88,0.016,129,3.483,149,3.835,150,3.483,180,1.618,268,1.107,295,2.731,296,2.48,363,3.465,364,6.07,365,4.104,366,4.104]],["title/classes/RequestLoginByEmailPasswordDto.html",[64,0.15,135,2.24]],["body/classes/RequestLoginByEmailPasswordDto.html",[3,0.309,4,0.269,5,0.269,7,0.485,18,2.181,19,0.025,21,1.012,47,0.394,63,0.309,64,0.239,86,0.016,87,0.021,88,0.016,135,3.563,153,2.764,154,3.541,180,1.655,268,1.147,295,2.83,296,2.57,367,3.592,368,5.86,369,4.253,370,5.354,371,4.253]],["title/classes/ResponseDto.html",[64,0.15,372,2.24]],["body/classes/ResponseDto.html",[3,0.282,4,0.245,5,0.245,7,0.442,19,0.026,21,1.06,31,0.908,35,1.359,47,0.359,48,3.268,50,0.974,63,0.282,64,0.173,75,3.387,86,0.015,87,0.019,88,0.015,180,1.558,195,2.789,196,2.57,268,1.044,274,2.207,362,3.739,372,3.354,373,3.268,374,5.199,375,4.733,376,3.87,377,3.87,378,4.256,379,3.87]],["title/classes/ResponseTokenDto.html",[64,0.15,140,1.863]],["body/classes/ResponseTokenDto.html",[3,0.282,4,0.245,5,0.245,7,0.442,19,0.026,21,1.06,31,0.908,35,1.044,47,0.359,63,0.282,64,0.173,75,3.046,86,0.015,87,0.019,88,0.015,140,2.789,180,1.558,195,2.789,196,2.57,268,1.044,274,1.695,314,2.57,362,2.872,372,4.2,374,4.733,375,4.256,378,3.268,380,3.268,381,5.605,382,3.87,383,3.87,384,3.87,385,3.87]],["title/guards/RolesGuard.html",[386,2.498,387,2.498]],["body/guards/RolesGuard.html",[3,0.232,4,0.202,5,0.202,7,0.364,8,1.68,19,0.026,21,0.837,23,1.211,29,1.68,30,1.368,31,0.717,32,1.68,33,2.693,47,0.509,50,0.803,58,1.626,63,0.232,64,0.142,65,1.505,67,1.68,86,0.012,87,0.017,88,0.012,116,1.278,148,2.591,183,1.765,205,0.986,262,3.283,357,2.693,359,2.367,387,3.283,388,3.19,389,2.693,390,5.488,391,3.19,392,5.966,393,3.19,394,4.425,395,5.488,396,3.19,397,3.19,398,2.693,399,2.367,400,3.19,401,3.19,402,4.425,403,3.19,404,3.19,405,3.19,406,2.367,407,3.19,408,3.19,409,3.19,410,3.19]],["title/classes/UpdateWishDto.html",[64,0.15,411,2.034]],["body/classes/UpdateWishDto.html",[3,0.316,4,0.275,5,0.275,7,0.496,18,1.77,19,0.026,21,0.821,31,0.704,35,1.463,47,0.403,63,0.316,64,0.242,86,0.017,87,0.021,88,0.017,180,1.677,268,1.172,291,3.223,292,4.39,293,4.581,294,3.668,295,2.891,296,2.625,411,3.278,412,4.025]],["title/classes/User.html",[64,0.15,205,1.04]],["body/classes/User.html",[3,0.215,4,0.187,5,0.187,7,0.338,18,2.372,19,0.026,21,1.101,30,1.508,31,0.943,35,1.571,47,0.389,58,2.487,63,0.215,64,0.132,86,0.011,87,0.016,88,0.011,153,2.301,154,2.948,180,1.297,195,2.323,196,2.14,197,2.537,205,1.297,215,2.301,246,3.533,268,0.798,274,1.838,358,4.12,359,3.62,406,3.114,413,2.498,414,4.444,415,2.958,416,4.198,417,2.958,418,4.12,419,2.958,420,2.958,421,2.958,422,4.879,423,4.198,424,2.498,425,2.958,426,2.498,427,3.114,428,1.396]],["title/modules/UserModule.html",[89,1.474,159,2.034]],["body/modules/UserModule.html",[2,1.712,3,0.264,4,0.23,5,0.23,19,0.026,47,0.537,50,0.914,63,0.264,64,0.162,86,0.014,87,0.019,88,0.014,89,2.378,91,1.85,92,1.85,93,2.193,94,2.193,95,1.85,96,3.282,97,3.282,104,2.919,105,2.193,106,2.193,108,2.415,109,2.693,110,2.415,159,3.824,187,3.402,429,3.065,430,3.065,431,3.065,432,3.629,433,2.193,434,3.065,435,3.629,436,3.629]],["title/classes/UserRepository.html",[64,0.15,433,2.034]],["body/classes/UserRepository.html",[3,0.33,4,0.287,5,0.287,19,0.026,47,0.517,63,0.33,64,0.203,86,0.017,87,0.021,88,0.017,205,1.402,206,2.742,268,1.224,314,2.842,428,2.14,433,3.368,437,3.831,438,4.476,439,3.831,440,4.537]],["title/injectables/UserService.html",[116,0.972,187,1.716]],["body/injectables/UserService.html",[3,0.206,4,0.179,5,0.179,7,0.324,8,1.546,9,2.248,16,2.709,19,0.026,21,0.901,23,1.546,24,2.28,29,1.809,30,1.473,31,0.772,32,1.809,35,1.285,47,0.512,50,0.714,63,0.206,64,0.127,65,1.337,66,1.445,67,1.546,86,0.011,87,0.016,88,0.011,116,1.176,117,1.445,148,1.445,153,2.248,183,1.569,187,2.076,205,1.705,206,1.713,208,2.103,209,3.021,210,1.886,223,1.886,238,2.103,264,3.864,273,3.438,275,2.103,284,3.021,433,3.47,434,2.394,441,2.394,442,4.072,443,4.072,444,2.835,445,2.835,446,4.072,447,2.835,448,4.072,449,2.835,450,2.835,451,2.835,452,2.835]],["title/classes/UserWish.html",[64,0.15,453,2.498]],["body/classes/UserWish.html",[3,0.238,4,0.207,5,0.207,7,0.373,18,2.096,19,0.026,21,0.973,31,0.834,47,0.477,63,0.238,64,0.146,86,0.013,87,0.017,88,0.013,180,1.39,205,1.903,215,2.122,268,0.881,274,1.97,275,2.423,406,3.338,414,3.818,427,2.423,428,1.541,453,3.338,454,2.758,455,5.145,456,3.139,457,3.266,458,4.498,459,5.544,460,4.498,461,3.266,462,3.266,463,3.266,464,3.266,465,5.145,466,3.266,467,3.266,468,3.266,469,3.266,470,3.266,471,3.266,472,4.498,473,3.266,474,4.498,475,3.266]],["title/classes/Wish.html",[64,0.15,456,1.716]],["body/classes/Wish.html",[3,0.296,4,0.257,5,0.257,7,0.464,18,2.119,19,0.026,21,0.983,31,0.842,35,1.403,47,0.377,63,0.296,64,0.181,86,0.016,87,0.02,88,0.016,180,1.607,215,2.706,268,1.096,274,2.277,292,4.256,414,4.256,418,4.844,427,3.859,428,1.917,456,2.651,476,3.431,477,4.063,478,4.063]],["title/controllers/WishController.html",[0,1.716,479,2.24]],["body/controllers/WishController.html",[0,1.113,2,1.03,3,0.159,4,0.138,5,0.138,7,0.249,8,1.273,16,2.953,18,2.013,19,0.026,21,0.934,23,1.876,24,2.569,29,1.739,30,1.415,31,0.742,32,1.739,47,0.52,50,0.55,55,1.453,58,1.113,63,0.159,64,0.097,65,1.03,66,1.113,67,1.876,83,1.843,86,0.008,87,0.013,88,0.008,124,1.843,138,2.831,139,3.447,215,2.461,274,2.517,289,3.152,411,3.387,426,1.843,428,1.03,456,1.113,479,2.231,480,1.843,481,2.183,482,2.831,483,2.831,484,3.867,485,2.831,486,2.831,487,1.843,488,2.183,489,1.843,490,2.183,491,2.183,492,2.183,493,1.843,494,2.183,495,2.183,496,1.843,497,2.183,498,2.183,499,2.183,500,2.183,501,2.183,502,2.183,503,2.259,504,2.183,505,1.62,506,1.843,507,2.183,508,2.831,509,2.183,510,2.183,511,2.183,512,2.183,513,2.183,514,2.183,515,2.183,516,2.183,517,2.183,518,2.183,519,2.183,520,2.183,521,2.183,522,2.183]],["title/modules/WishModule.html",[89,1.474,102,2.034]],["body/modules/WishModule.html",[2,2.306,3,0.269,4,0.234,5,0.234,19,0.026,47,0.562,50,0.93,63,0.269,64,0.165,86,0.014,87,0.019,88,0.014,89,2.399,91,1.884,92,1.884,93,2.233,94,2.233,95,1.884,96,3.311,97,2.233,102,3.766,104,2.954,105,2.233,106,2.233,108,2.459,109,2.742,110,2.459,479,3.646,503,3.449,523,3.12,524,3.12,525,3.695,526,3.695,527,2.233,528,3.12,529,3.695,530,3.695]],["title/classes/WishRepository.html",[64,0.15,527,2.034]],["body/classes/WishRepository.html",[3,0.33,4,0.287,5,0.287,19,0.026,47,0.517,63,0.33,64,0.203,86,0.017,87,0.021,88,0.017,268,1.224,314,2.842,428,2.14,438,4.476,439,3.831,456,2.313,505,3.366,527,3.368,531,3.831,532,4.537]],["title/injectables/WishService.html",[116,0.972,503,1.863]],["body/injectables/WishService.html",[3,0.152,4,0.132,5,0.132,7,0.238,8,1.227,9,2.674,16,2.926,19,0.026,21,0.968,23,1.836,24,2.537,29,1.836,30,1.495,31,0.783,32,1.836,47,0.475,50,0.524,63,0.152,64,0.093,65,0.982,66,1.062,67,1.836,86,0.008,87,0.012,88,0.008,116,0.934,117,1.062,148,2.02,183,1.153,197,2.395,201,1.545,215,1.869,223,2.151,230,2.399,260,2.399,274,2.482,289,2.922,290,1.545,411,3.227,412,1.545,428,0.982,456,3.008,482,2.73,483,2.73,484,3.772,485,2.73,486,2.73,487,2.73,489,2.73,493,2.73,496,2.73,503,1.789,505,1.545,506,1.759,508,2.73,527,3.093,528,1.759,533,1.759,534,2.083,535,2.083,536,2.083,537,2.083,538,2.083,539,2.083,540,2.083,541,2.083,542,3.233,543,3.233,544,3.233,545,2.083,546,3.233,547,2.083,548,2.083]],["title/coverage.html",[549,3.407]],["body/coverage.html",[0,2.16,1,1.543,5,0.147,6,1.959,19,0.026,26,1.543,31,0.376,53,1.284,55,1.543,60,1.543,64,0.283,86,0.009,87,0.013,88,0.009,95,1.183,103,1.402,116,1.542,118,1.959,122,1.543,123,1.959,129,1.543,135,1.543,140,1.284,144,1.183,165,1.543,179,2.605,187,1.183,197,1.402,205,0.717,211,1.402,213,1.943,214,1.543,269,1.959,289,1.402,290,1.721,291,2.605,297,1.959,309,2.965,334,1.959,335,1.959,337,1.959,340,1.543,351,1.721,352,1.959,353,1.959,354,1.959,361,1.959,363,1.959,367,1.959,372,1.543,373,1.959,380,1.959,386,1.721,387,1.721,389,1.959,399,1.721,411,1.402,412,1.721,413,1.959,433,1.402,437,1.959,441,1.959,453,1.721,454,1.959,456,1.183,476,1.959,479,1.543,480,1.959,503,1.284,527,1.402,531,1.959,533,1.959,549,1.721,550,2.319,551,2.319,552,2.319,553,6.762,554,5.548,555,3.511,556,5.077,557,2.319,558,1.959,559,5.714,560,2.965,561,3.511,562,1.721,563,5.077,564,2.319,565,3.511,566,1.959,567,2.319,568,2.319]],["title/dependencies.html",[92,2.064,569,2.812]],["body/dependencies.html",[19,0.027,50,0.914,52,2.193,64,0.216,86,0.014,87,0.019,88,0.014,92,1.85,110,2.415,163,2.415,210,2.415,284,2.693,296,2.193,312,4.029,313,3.065,343,3.065,398,3.065,428,1.712,570,5.431,571,3.629,572,4.831,573,3.629,574,4.831,575,3.629,576,3.629,577,3.629,578,3.629,579,3.629,580,3.629,581,3.629,582,3.629,583,3.629,584,3.629,585,3.629,586,3.629,587,3.629,588,3.629,589,3.629,590,3.629,591,3.629,592,3.629,593,3.629,594,3.629,595,3.629,596,3.629,597,3.629,598,3.629,599,3.629]],["title/miscellaneous/enumerations.html",[600,1.556,601,3.418]],["body/miscellaneous/enumerations.html",[7,0.555,19,0.025,58,2.963,86,0.019,87,0.022,88,0.019,196,2.963,205,1.796,600,2.69,601,4.105,602,4.862,603,4.862,604,5.812]],["title/miscellaneous/functions.html",[600,1.556,605,3.418]],["body/miscellaneous/functions.html",[7,0.542,19,0.024,29,1.803,30,1.467,32,1.803,55,3.813,86,0.018,87,0.022,88,0.018,95,3.138,424,4.01,558,4.01,562,3.523,566,4.01,600,2.628,605,4.01,606,4.748,607,4.748,608,4.748]],["title/index.html",[7,0.321,609,2.812,610,2.812]],["body/index.html",[4,0.211,15,3.852,19,0.026,86,0.013,87,0.017,88,0.013,438,2.473,549,2.473,611,3.333,612,3.333,613,4.561,614,3.333,615,3.333,616,3.333,617,3.333,618,3.333,619,3.333,620,3.333,621,5.2,622,3.333,623,3.333,624,3.333,625,6.191,626,3.333,627,3.333,628,3.333,629,6.047,630,3.333,631,3.333,632,4.561,633,3.333,634,3.333,635,3.333,636,3.333,637,4.561,638,3.333,639,3.333,640,3.333,641,4.561,642,4.561,643,3.333,644,3.333,645,3.333,646,3.333,647,3.333,648,2.814,649,3.333,650,3.333,651,3.333,652,3.333,653,3.333,654,3.333,655,3.333,656,3.333,657,3.333,658,3.333,659,3.333,660,3.333,661,3.333,662,3.333,663,3.333,664,3.333,665,3.333,666,3.333]],["title/modules.html",[91,2.341]],["body/modules.html",[19,0.022,86,0.018,87,0.022,88,0.018,90,3.123,91,2.393,101,2.836,102,2.836,159,2.836,648,5.375,667,6.366,668,6.366,669,6.366]],["title/overview.html",[670,3.878]],["body/overview.html",[2,1.579,19,0.025,53,2.884,86,0.013,87,0.018,88,0.013,89,1.465,90,4.308,91,1.706,92,1.706,93,2.022,94,2.022,95,1.706,96,2.022,97,2.022,98,2.826,99,2.826,100,2.826,101,3.745,102,3.544,103,3.149,104,2.764,105,2.022,106,2.022,117,1.706,144,2.657,156,2.826,157,2.826,158,2.826,159,3.659,187,3.16,268,0.903,360,2.483,386,2.483,429,2.826,430,2.826,431,2.826,503,2.884,523,2.826,524,2.826,670,2.826,671,3.347,672,3.347,673,3.347,674,3.347,675,3.347,676,3.347]],["title/miscellaneous/variables.html",[600,1.556,677,3.418]],["body/miscellaneous/variables.html",[7,0.524,19,0.025,31,0.743,35,1.237,58,2.339,86,0.018,87,0.021,88,0.018,195,3.106,196,2.861,399,4.164,560,3.874,562,4.807,600,2.539,677,3.874,678,5.612,679,4.588]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/JwtUtils.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["0.2.30",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":675,"title":{},"body":{"overview.html":{}}}],["10",{"_index":275,"title":{},"body":{"classes/BCryptUtils.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{}}}],["15",{"_index":674,"title":{},"body":{"overview.html":{}}}],["2",{"_index":676,"title":{},"body":{"overview.html":{}}}],["2.2.5",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":471,"title":{},"body":{"classes/UserWish.html":{}}}],["3",{"_index":672,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["30d",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["4",{"_index":671,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["4.7.12",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["5.0.0",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":673,"title":{},"body":{"overview.html":{}}}],["6.6.3",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["accesstoken",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"interfaces/ReponseGraphApi.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{}}}],["account",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin",{"_index":604,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["amazing",{"_index":649,"title":{},"body":{"index.html":{}}}],["any,info",{"_index":306,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["any,user",{"_index":305,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["api/v1/auth",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/v1/wishes",{"_index":481,"title":{},"body":{"controllers/WishController.html":{}}}],["app",{"_index":627,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":619,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":90,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":53,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["asdfalsfjdlaskfdj",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"classes/JwtStrategy.html":{}}}],["async",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/UserService.html":{},"injectables/WishService.html":{}}}],["auth",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"controllers/WishController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["auth(...roles",{"_index":608,"title":{},"body":{"miscellaneous/functions.html":{}}}],["auth(roleenum.admin",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"controllers/WishController.html":{}}}],["auth.guard",{"_index":62,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.guard.ts",{"_index":335,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["authcontroller",{"_index":122,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":336,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":101,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":659,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":144,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/UserService.html":{},"injectables/WishService.html":{}}}],["backers",{"_index":650,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["badrequestexception(\"access",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["badrequestexception(e.message",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["bcrypt",{"_index":284,"title":{},"body":{"classes/BCryptUtils.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(str",{"_index":288,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["bcrypt.hash(str",{"_index":287,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["bcrypt.hash(user.password",{"_index":451,"title":{},"body":{"injectables/UserService.html":{}}}],["bcryptutils",{"_index":211,"title":{"classes/BCryptUtils.html":{}},"body":{"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"interfaces/ReponseGraphApi.html":{},"coverage.html":{}}}],["bcryptutils.compare(pwd",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["body",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"controllers/WishController.html":{}}}],["boolean",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":669,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":667,"title":{},"body":{"modules.html":{}}}],["building",{"_index":614,"title":{},"body":{"index.html":{}}}],["callbackurl",{"_index":321,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["canactivate",{"_index":390,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":394,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["check",{"_index":463,"title":{},"body":{"classes/UserWish.html":{}}}],["check(`\"gift",{"_index":470,"title":{},"body":{"classes/UserWish.html":{}}}],["class",{"_index":64,"title":{"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"classes/JwtStrategy.html":{},"classes/JwtUtils.html":{},"classes/PayloadJwtDto.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"classes/WishRepository.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/JwtUtils.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":268,"title":{},"body":{"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"classes/JwtStrategy.html":{},"classes/JwtUtils.html":{},"classes/PayloadJwtDto.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"classes/WishRepository.html":{},"overview.html":{}}}],["clientid",{"_index":317,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["clientsecret",{"_index":319,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["cluster_appmodule",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":429,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":431,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":430,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_wishmodule",{"_index":523,"title":{},"body":{"modules/WishModule.html":{},"overview.html":{}}}],["cluster_wishmodule_providers",{"_index":524,"title":{},"body":{"modules/WishModule.html":{},"overview.html":{}}}],["column",{"_index":414,"title":{},"body":{"classes/User.html":{},"classes/UserWish.html":{},"classes/Wish.html":{}}}],["column({default",{"_index":423,"title":{},"body":{"classes/User.html":{}}}],["column({unique",{"_index":416,"title":{},"body":{"classes/User.html":{}}}],["common/decorator/auth.decorator",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["common/dto/requestfbuser.interface",{"_index":57,"title":{},"body":{"controllers/AppController.html":{}}}],["common/enum/role.enum",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["common/guard/jwt",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["common/strategy/facebook.strategy",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":272,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["compare(str",{"_index":277,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["console.log(e",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["console.log(process.env.jwt_secretkey",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["const",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"interfaces/ReponseGraphApi.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"injectables/WishService.html":{}}}],["constructor",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"injectables/WishService.html":{}}}],["constructor(httpservice",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["constructor(reflector",{"_index":391,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":444,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(wishrepository",{"_index":534,"title":{},"body":{"injectables/WishService.html":{}}}],["content",{"_index":292,"title":{},"body":{"classes/CreateWishDto.html":{},"classes/UpdateWishDto.html":{},"classes/Wish.html":{}}}],["context",{"_index":397,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":405,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":404,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":407,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/WishController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/WishController.html":{},"coverage.html":{}}}],["controller(\"/api/v1/auth",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('/api/v1/wishes",{"_index":510,"title":{},"body":{"controllers/WishController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"overview.html":{}}}],["core/auth/auth.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["core/auth/service/auth.service",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["core/wish/wish.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["coverage",{"_index":549,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdat",{"_index":358,"title":{},"body":{"classes/PayloadJwtDto.html":{},"classes/User.html":{}}}],["createnewuser",{"_index":442,"title":{},"body":{"injectables/UserService.html":{}}}],["createnewuser(user",{"_index":446,"title":{},"body":{"injectables/UserService.html":{}}}],["createnewwish",{"_index":482,"title":{},"body":{"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["createnewwish(@body",{"_index":515,"title":{},"body":{"controllers/WishController.html":{}}}],["createnewwish(createwishdto",{"_index":487,"title":{},"body":{"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["createwishdto",{"_index":289,"title":{"classes/CreateWishDto.html":{}},"body":{"classes/CreateWishDto.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{},"coverage.html":{}}}],["createwishdto.content",{"_index":545,"title":{},"body":{"injectables/WishService.html":{}}}],["data",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{}}}],["date",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"classes/User.html":{}}}],["declarations",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"overview.html":{}}}],["decorator/role.decorator",{"_index":400,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decorators",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateWishDto.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{}}}],["default",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultsaltorround",{"_index":271,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["defined",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"classes/PayloadJwtDto.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["delete",{"_index":499,"title":{},"body":{"controllers/WishController.html":{}}}],["delete(\":id",{"_index":517,"title":{},"body":{"controllers/WishController.html":{}}}],["delete(':id",{"_index":490,"title":{},"body":{"controllers/WishController.html":{}}}],["deleteresult",{"_index":506,"title":{},"body":{"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["deletewishbyid",{"_index":483,"title":{},"body":{"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["deletewishbyid(@param(\"id",{"_index":518,"title":{},"body":{"controllers/WishController.html":{}}}],["deletewishbyid(id",{"_index":489,"title":{},"body":{"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["dependencies",{"_index":92,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":620,"title":{},"body":{"index.html":{}}}],["development",{"_index":628,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":303,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["done(null",{"_index":333,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["dotenv",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["dto/create",{"_index":507,"title":{},"body":{"controllers/WishController.html":{}}}],["dto/payload",{"_index":344,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["dto/requestloginbyacesstokenfb.dto",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/requestloginbyemailpassword.dto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/responsetoken.dto",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["dto/update",{"_index":509,"title":{},"body":{"controllers/WishController.html":{}}}],["e",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["e.response.status",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["e2e",{"_index":638,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":615,"title":{},"body":{"index.html":{}}}],["email",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["emails",{"_index":325,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["emails[0].value",{"_index":327,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["entity",{"_index":427,"title":{},"body":{"classes/User.html":{},"classes/UserWish.html":{},"classes/Wish.html":{}}}],["entity({name",{"_index":468,"title":{},"body":{"classes/UserWish.html":{}}}],["entityrepository",{"_index":439,"title":{},"body":{"classes/UserRepository.html":{},"classes/WishRepository.html":{}}}],["entityrepository(user",{"_index":440,"title":{},"body":{"classes/UserRepository.html":{}}}],["entityrepository(wish",{"_index":532,"title":{},"body":{"classes/WishRepository.html":{}}}],["enum/role.enum",{"_index":357,"title":{},"body":{"classes/PayloadJwtDto.html":{},"guards/RolesGuard.html":{}}}],["enumerations",{"_index":601,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["err",{"_index":304,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["executioncontext",{"_index":395,"title":{},"body":{"guards/RolesGuard.html":{}}}],["expiresin",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/JwtUtils.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{}}}],["exports",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"overview.html":{}}}],["express",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":314,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"interfaces/RequestFBUser.html":{},"classes/ResponseTokenDto.html":{},"classes/UserRepository.html":{},"classes/WishRepository.html":{}}}],["extractjwt",{"_index":342,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":347,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["facebook",{"_index":313,"title":{},"body":{"injectables/FacebookStrategy.html":{},"dependencies.html":{}}}],["facebooklogin",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["facebookloginredirect",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["facebookloginredirect(@req",{"_index":73,"title":{},"body":{"controllers/AppController.html":{}}}],["facebookloginredirect(req",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["facebookstrategy",{"_index":103,"title":{"injectables/FacebookStrategy.html":{}},"body":{"modules/AppModule.html":{},"injectables/FacebookStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["false",{"_index":349,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["fb",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/JwtUtils.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{},"coverage.html":{}}}],["findbyemail",{"_index":443,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":448,"title":{},"body":{"injectables/UserService.html":{}}}],["first_name",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["firstname",{"_index":328,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["fix",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["found",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/WishService.html":{}}}],["framework",{"_index":613,"title":{},"body":{"index.html":{}}}],["function",{"_index":309,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["functions",{"_index":605,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(\"/facebook",{"_index":69,"title":{},"body":{"controllers/AppController.html":{}}}],["get(\"/facebook/redirect",{"_index":72,"title":{},"body":{"controllers/AppController.html":{}}}],["get(\"/testloginbyfacebook",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["get(\":id",{"_index":512,"title":{},"body":{"controllers/WishController.html":{}}}],["get(\"no",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/admin",{"_index":82,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/admin')@auth(roleenum.admin",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/facebook')@useguards(undefined",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/facebook/redirect')@useguards(undefined",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/testloginbyfacebook')@useguards(undefined",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':id",{"_index":494,"title":{},"body":{"controllers/WishController.html":{}}}],["get('no",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["get('profile",{"_index":80,"title":{},"body":{"controllers/AppController.html":{}}}],["get(urlgraphapi",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["getallwishes",{"_index":484,"title":{},"body":{"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["gethello",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getno",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@req",{"_index":81,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":609,"title":{"index.html":{}},"body":{}}],["getwishbyid",{"_index":485,"title":{},"body":{"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["getwishbyid(@param(\"id",{"_index":513,"title":{},"body":{"controllers/WishController.html":{}}}],["getwishbyid(id",{"_index":493,"title":{},"body":{"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["gift",{"_index":455,"title":{},"body":{"classes/UserWish.html":{}}}],["grow",{"_index":645,"title":{},"body":{"index.html":{}}}],["guard",{"_index":386,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":388,"title":{},"body":{"guards/RolesGuard.html":{}}}],["hash",{"_index":273,"title":{},"body":{"classes/BCryptUtils.html":{},"injectables/UserService.html":{}}}],["hash(str",{"_index":280,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["hasn't",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["haven't",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["hello",{"_index":120,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":656,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/facebook/redirect",{"_index":322,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["httpmodule",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["https://graph.facebook.com/v9.0/${userid}?fields=id,name,email,first_name,last_name&access_token=${accesstoken",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["https://nestjs.com",{"_index":663,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["httpstatus",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"classes/ResponseDto.html":{}}}],["httpstatus.accepted",{"_index":378,"title":{},"body":{"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{}}}],["httpstatus.ok",{"_index":71,"title":{},"body":{"controllers/AppController.html":{}}}],["id",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"classes/User.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["identifier",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":348,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["implements",{"_index":401,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{}}}],["imports",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/JwtUtils.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{}}}],["inherited",{"_index":381,"title":{},"body":{"classes/ResponseTokenDto.html":{}}}],["injectable",{"_index":116,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/UserService.html":{},"injectables/WishService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/ReponseGraphApi.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"injectables/WishService.html":{},"coverage.html":{}}}],["injectables",{"_index":117,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/UserService.html":{},"injectables/WishService.html":{},"overview.html":{}}}],["inserteduser",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["installation",{"_index":624,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":626,"title":{},"body":{"index.html":{}}}],["interface",{"_index":213,"title":{"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"coverage.html":{}}}],["interfaces",{"_index":360,"title":{},"body":{"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"overview.html":{}}}],["intergrated",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["internalservererrorexception",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["internalservererrorexception(e.message",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["isemail",{"_index":368,"title":{},"body":{"classes/RequestLoginByEmailPasswordDto.html":{}}}],["isequal",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["join",{"_index":652,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":464,"title":{},"body":{"classes/UserWish.html":{}}}],["joincolumn([{name",{"_index":472,"title":{},"body":{"classes/UserWish.html":{}}}],["jwt",{"_index":343,"title":{},"body":{"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.dto",{"_index":345,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["jwt.dto.ts",{"_index":354,"title":{},"body":{"classes/PayloadJwtDto.html":{},"coverage.html":{}}}],["jwt.dto.ts:4",{"_index":356,"title":{},"body":{"classes/PayloadJwtDto.html":{}}}],["jwtauthguard",{"_index":60,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":346,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["jwtmodule",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["jwtstrategy",{"_index":165,"title":{"classes/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"classes/JwtStrategy.html":{},"coverage.html":{}}}],["jwtutils",{"_index":351,"title":{"classes/JwtUtils.html":{}},"body":{"classes/JwtUtils.html":{},"coverage.html":{}}}],["kamil",{"_index":660,"title":{},"body":{"index.html":{}}}],["last_name",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["lastname",{"_index":330,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["legend",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"overview.html":{}}}],["license",{"_index":666,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":642,"title":{},"body":{"index.html":{}}}],["literal",{"_index":355,"title":{},"body":{"classes/PayloadJwtDto.html":{}}}],["logger",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["logger(authservice.name",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["logger:logger",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["loginbyaccesstokenfb",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["loginbyaccesstokenfb(accesstoken",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginbyaccesstokenfb(request",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginbyemailpassword",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginbyemailpassword(@body",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginbyemailpassword(email",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["loginbyemailpassword(request",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["manytoone",{"_index":465,"title":{},"body":{"classes/UserWish.html":{}}}],["manytoone(undefined",{"_index":458,"title":{},"body":{"classes/UserWish.html":{}}}],["map",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["matching",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/JwtUtils.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":374,"title":{},"body":{"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{}}}],["metadata",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["minlength",{"_index":295,"title":{},"body":{"classes/CreateWishDto.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/UpdateWishDto.html":{}}}],["minlength(1",{"_index":364,"title":{},"body":{"classes/RequestLoginByAcessTokenFBDto.html":{}}}],["minlength(5",{"_index":293,"title":{},"body":{"classes/CreateWishDto.html":{},"classes/UpdateWishDto.html":{}}}],["minlength(8",{"_index":370,"title":{},"body":{"classes/RequestLoginByEmailPasswordDto.html":{}}}],["miscellaneous",{"_index":600,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":641,"title":{},"body":{"index.html":{}}}],["mode",{"_index":632,"title":{},"body":{"index.html":{}}}],["module",{"_index":89,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"overview.html":{}}}],["modules",{"_index":91,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":655,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":661,"title":{},"body":{"index.html":{}}}],["name",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"injectables/UserService.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{},"miscellaneous/functions.html":{}}}],["name.familyname",{"_index":331,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["name.givenname",{"_index":329,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["nest",{"_index":621,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":665,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/ReponseGraphApi.html":{},"classes/ResponseDto.html":{},"guards/RolesGuard.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"injectables/WishService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":398,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"dependencies.html":{}}}],["new",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"classes/User.html":{},"injectables/WishService.html":{},"coverage.html":{}}}],["newuser",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["newuser.createdat",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["newuser.email",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["newuser.name",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["newuser.password",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["node.js",{"_index":612,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/WishService.html":{}}}],["notfoundexception(\"email",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["notfoundexception(\"email/password",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["notfoundexception(\"id",{"_index":543,"title":{},"body":{"injectables/WishService.html":{}}}],["npm",{"_index":625,"title":{},"body":{"index.html":{}}}],["null",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/UserService.html":{}}}],["number",{"_index":274,"title":{},"body":{"classes/BCryptUtils.html":{},"classes/PayloadJwtDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"classes/User.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["object",{"_index":362,"title":{},"body":{"interfaces/RequestFBUser.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{}}}],["open",{"_index":643,"title":{},"body":{"index.html":{}}}],["optional",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"overview.html":{}}}],["overview",{"_index":670,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":569,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":500,"title":{},"body":{"controllers/WishController.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{},"miscellaneous/functions.html":{}}}],["passport",{"_index":312,"title":{},"body":{"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":310,"title":{},"body":{"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":315,"title":{},"body":{"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{}}}],["password",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/User.html":{}}}],["patch",{"_index":501,"title":{},"body":{"controllers/WishController.html":{}}}],["patch(\":id",{"_index":520,"title":{},"body":{"controllers/WishController.html":{}}}],["patch(':id",{"_index":497,"title":{},"body":{"controllers/WishController.html":{}}}],["payload",{"_index":332,"title":{},"body":{"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{}}}],["payloadjwtdto",{"_index":340,"title":{"classes/PayloadJwtDto.html":{}},"body":{"classes/JwtStrategy.html":{},"classes/PayloadJwtDto.html":{},"coverage.html":{}}}],["permission",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["permissions",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["photos",{"_index":326,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["pipe(map(response",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["please",{"_index":653,"title":{},"body":{"index.html":{}}}],["post",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/WishController.html":{}}}],["post(\"/login",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/WishController.html":{}}}],["primary",{"_index":459,"title":{},"body":{"classes/UserWish.html":{}}}],["primarygeneratedcolumn",{"_index":418,"title":{},"body":{"classes/User.html":{},"classes/Wish.html":{}}}],["private",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"interfaces/ReponseGraphApi.html":{}}}],["process.env.app_id",{"_index":318,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.app_secret",{"_index":320,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["production",{"_index":634,"title":{},"body":{"index.html":{}}}],["profile",{"_index":302,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profilefields",{"_index":324,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["progressive",{"_index":611,"title":{},"body":{"index.html":{}}}],["project",{"_index":644,"title":{},"body":{"index.html":{}}}],["promise",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"injectables/FacebookStrategy.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/UserService.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["properties",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"classes/UserWish.html":{},"classes/Wish.html":{}}}],["providers",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"overview.html":{}}}],["public",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/UserService.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["pwd",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["read",{"_index":654,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/UserService.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["referencedcolumnname",{"_index":474,"title":{},"body":{"classes/UserWish.html":{}}}],["reflect",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":392,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refreshtoken",{"_index":301,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["reponsegraphapi",{"_index":214,"title":{"interfaces/ReponseGraphApi.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"coverage.html":{}}}],["repository",{"_index":438,"title":{},"body":{"classes/UserRepository.html":{},"classes/WishRepository.html":{},"index.html":{}}}],["repository/user.repository",{"_index":434,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["repository/wish.repository",{"_index":528,"title":{},"body":{"modules/WishModule.html":{},"injectables/WishService.html":{}}}],["req",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{}}}],["req.user",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["req?.user?.payload?.user",{"_index":408,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestFBUser.html":{}}}],["requestfbuser",{"_index":26,"title":{"interfaces/RequestFBUser.html":{}},"body":{"controllers/AppController.html":{},"interfaces/RequestFBUser.html":{},"coverage.html":{}}}],["requestloginbyacesstokenfbdto",{"_index":129,"title":{"classes/RequestLoginByAcessTokenFBDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"coverage.html":{}}}],["requestloginbyemailpassworddto",{"_index":135,"title":{"classes/RequestLoginByEmailPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"coverage.html":{}}}],["requiredroles",{"_index":402,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":409,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"overview.html":{}}}],["response",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["response.data",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["responsedto",{"_index":372,"title":{"classes/ResponseDto.html":{}},"body":{"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"coverage.html":{}}}],["responsedto:4",{"_index":384,"title":{},"body":{"classes/ResponseTokenDto.html":{}}}],["responsedto:5",{"_index":382,"title":{},"body":{"classes/ResponseTokenDto.html":{}}}],["responsedto:6",{"_index":383,"title":{},"body":{"classes/ResponseTokenDto.html":{}}}],["responsetokendto",{"_index":140,"title":{"classes/ResponseTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"classes/ResponseTokenDto.html":{},"coverage.html":{}}}],["responsetokendto.data",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["result",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/JwtUtils.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/JwtUtils.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/JwtStrategy.html":{},"interfaces/ReponseGraphApi.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["returns",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["rimraf",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":359,"title":{},"body":{"classes/PayloadJwtDto.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["roleenum",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"classes/PayloadJwtDto.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/WishController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roleenum.user",{"_index":422,"title":{},"body":{"classes/User.html":{}}}],["roles",{"_index":562,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["roles_key",{"_index":399,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":387,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["round",{"_index":285,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["run",{"_index":629,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["rxjs/operators",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["saltorround",{"_index":281,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["scalable",{"_index":616,"title":{},"body":{"index.html":{}}}],["scope",{"_index":323,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["secret",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":350,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["server",{"_index":617,"title":{},"body":{"index.html":{}}}],["service/auth.service",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["service/user.service",{"_index":435,"title":{},"body":{"modules/UserModule.html":{}}}],["service/wish.service",{"_index":529,"title":{},"body":{"modules/WishModule.html":{}}}],["setmetadata(roles_key",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":618,"title":{},"body":{"index.html":{}}}],["sign",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["signed",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["signoptions",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/JwtUtils.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"modules/WishModule.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{},"index.html":{}}}],["sponsors",{"_index":647,"title":{},"body":{"index.html":{}}}],["src/.../auth.decorator.ts",{"_index":606,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":607,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.decorator.ts",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":602,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/api/v1/auth/controller/auth.controller",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/api/v1/auth/controller/auth.controller.ts",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/api/v1/auth/controller/auth.controller.ts:13",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/api/v1/auth/controller/auth.controller.ts:19",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/api/v1/auth/dto/requestloginbyacesstokenfb.dto.ts",{"_index":363,"title":{},"body":{"classes/RequestLoginByAcessTokenFBDto.html":{},"coverage.html":{}}}],["src/api/v1/auth/dto/requestloginbyacesstokenfb.dto.ts:5",{"_index":366,"title":{},"body":{"classes/RequestLoginByAcessTokenFBDto.html":{}}}],["src/api/v1/auth/dto/requestloginbyacesstokenfb.dto.ts:8",{"_index":365,"title":{},"body":{"classes/RequestLoginByAcessTokenFBDto.html":{}}}],["src/api/v1/auth/dto/requestloginbyemailpassword.dto.ts",{"_index":367,"title":{},"body":{"classes/RequestLoginByEmailPasswordDto.html":{},"coverage.html":{}}}],["src/api/v1/auth/dto/requestloginbyemailpassword.dto.ts:5",{"_index":369,"title":{},"body":{"classes/RequestLoginByEmailPasswordDto.html":{}}}],["src/api/v1/auth/dto/requestloginbyemailpassword.dto.ts:8",{"_index":371,"title":{},"body":{"classes/RequestLoginByEmailPasswordDto.html":{}}}],["src/api/v1/wish/controller/wish.controller",{"_index":526,"title":{},"body":{"modules/WishModule.html":{}}}],["src/api/v1/wish/controller/wish.controller.ts",{"_index":480,"title":{},"body":{"controllers/WishController.html":{},"coverage.html":{}}}],["src/api/v1/wish/controller/wish.controller.ts:17",{"_index":492,"title":{},"body":{"controllers/WishController.html":{}}}],["src/api/v1/wish/controller/wish.controller.ts:22",{"_index":495,"title":{},"body":{"controllers/WishController.html":{}}}],["src/api/v1/wish/controller/wish.controller.ts:27",{"_index":488,"title":{},"body":{"controllers/WishController.html":{}}}],["src/api/v1/wish/controller/wish.controller.ts:32",{"_index":491,"title":{},"body":{"controllers/WishController.html":{}}}],["src/api/v1/wish/controller/wish.controller.ts:37",{"_index":498,"title":{},"body":{"controllers/WishController.html":{}}}],["src/api/v1/wish/dto/create",{"_index":290,"title":{},"body":{"classes/CreateWishDto.html":{},"injectables/WishService.html":{},"coverage.html":{}}}],["src/api/v1/wish/dto/update",{"_index":412,"title":{},"body":{"classes/UpdateWishDto.html":{},"injectables/WishService.html":{},"coverage.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:20",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:26",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:35",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:44",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:50",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:55",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":119,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/decorator/auth.decorator",{"_index":502,"title":{},"body":{"controllers/WishController.html":{}}}],["src/common/decorator/auth.decorator.ts",{"_index":558,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorator/role.decorator.ts",{"_index":560,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dto/payload",{"_index":353,"title":{},"body":{"classes/PayloadJwtDto.html":{},"coverage.html":{}}}],["src/common/dto/requestfbuser.interface.ts",{"_index":361,"title":{},"body":{"interfaces/RequestFBUser.html":{},"coverage.html":{}}}],["src/common/dto/response.dto",{"_index":385,"title":{},"body":{"classes/ResponseTokenDto.html":{}}}],["src/common/dto/response.dto.ts",{"_index":373,"title":{},"body":{"classes/ResponseDto.html":{},"coverage.html":{}}}],["src/common/dto/response.dto.ts:4",{"_index":379,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/common/dto/response.dto.ts:5",{"_index":376,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/common/dto/response.dto.ts:6",{"_index":377,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/common/enum/role.enum",{"_index":426,"title":{},"body":{"classes/User.html":{},"controllers/WishController.html":{}}}],["src/common/enum/role.enum.ts",{"_index":603,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/guard/jwt",{"_index":334,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/common/guard/roles.guard.ts",{"_index":389,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guard/roles.guard.ts:10",{"_index":396,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guard/roles.guard.ts:7",{"_index":393,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/strategy/facebook.strategy.ts",{"_index":297,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["src/common/strategy/facebook.strategy.ts:17",{"_index":308,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/common/strategy/facebook.strategy.ts:6",{"_index":299,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/common/strategy/jwt.strategy",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/common/strategy/jwt.strategy.ts",{"_index":337,"title":{},"body":{"classes/JwtStrategy.html":{},"coverage.html":{}}}],["src/common/strategy/jwt.strategy.ts:16",{"_index":341,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/common/strategy/jwt.strategy.ts:6",{"_index":338,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/common/util/bcrypt.util",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["src/common/util/bcrypt.util.ts",{"_index":269,"title":{},"body":{"classes/BCryptUtils.html":{},"coverage.html":{}}}],["src/common/util/bcrypt.util.ts:16",{"_index":278,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["src/common/util/bcrypt.util.ts:5",{"_index":276,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["src/common/util/bcrypt.util.ts:7",{"_index":282,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["src/common/util/jwt.util.ts",{"_index":352,"title":{},"body":{"classes/JwtUtils.html":{},"coverage.html":{}}}],["src/core/auth/auth.module.ts",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/core/auth/dto/responsetoken.dto",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/core/auth/dto/responsetoken.dto.ts",{"_index":380,"title":{},"body":{"classes/ResponseTokenDto.html":{},"coverage.html":{}}}],["src/core/auth/service/auth.service.ts",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"coverage.html":{}}}],["src/core/auth/service/auth.service.ts:20",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/core/auth/service/auth.service.ts:27",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/core/auth/service/auth.service.ts:81",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/core/user/repository/user.repository.ts",{"_index":437,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/core/user/service/user.service",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["src/core/user/service/user.service.ts",{"_index":441,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/core/user/service/user.service.ts:11",{"_index":449,"title":{},"body":{"injectables/UserService.html":{}}}],["src/core/user/service/user.service.ts:15",{"_index":447,"title":{},"body":{"injectables/UserService.html":{}}}],["src/core/user/service/user.service.ts:7",{"_index":445,"title":{},"body":{"injectables/UserService.html":{}}}],["src/core/user/user.module.ts",{"_index":432,"title":{},"body":{"modules/UserModule.html":{}}}],["src/core/wish/repository/wish.repository.ts",{"_index":531,"title":{},"body":{"classes/WishRepository.html":{},"coverage.html":{}}}],["src/core/wish/service/wish.service",{"_index":504,"title":{},"body":{"controllers/WishController.html":{}}}],["src/core/wish/service/wish.service.ts",{"_index":533,"title":{},"body":{"injectables/WishService.html":{},"coverage.html":{}}}],["src/core/wish/service/wish.service.ts:13",{"_index":538,"title":{},"body":{"injectables/WishService.html":{}}}],["src/core/wish/service/wish.service.ts:17",{"_index":539,"title":{},"body":{"injectables/WishService.html":{}}}],["src/core/wish/service/wish.service.ts:25",{"_index":536,"title":{},"body":{"injectables/WishService.html":{}}}],["src/core/wish/service/wish.service.ts:31",{"_index":537,"title":{},"body":{"injectables/WishService.html":{}}}],["src/core/wish/service/wish.service.ts:35",{"_index":540,"title":{},"body":{"injectables/WishService.html":{}}}],["src/core/wish/service/wish.service.ts:9",{"_index":535,"title":{},"body":{"injectables/WishService.html":{}}}],["src/core/wish/wish.module.ts",{"_index":525,"title":{},"body":{"modules/WishModule.html":{}}}],["src/entity/user.entity",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"interfaces/ReponseGraphApi.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["src/entity/user.entity.ts",{"_index":413,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/entity/user.entity.ts:10",{"_index":420,"title":{},"body":{"classes/User.html":{}}}],["src/entity/user.entity.ts:13",{"_index":417,"title":{},"body":{"classes/User.html":{}}}],["src/entity/user.entity.ts:16",{"_index":421,"title":{},"body":{"classes/User.html":{}}}],["src/entity/user.entity.ts:19",{"_index":415,"title":{},"body":{"classes/User.html":{}}}],["src/entity/user.entity.ts:22",{"_index":425,"title":{},"body":{"classes/User.html":{}}}],["src/entity/user.entity.ts:7",{"_index":419,"title":{},"body":{"classes/User.html":{}}}],["src/entity/user_wish.entity.ts",{"_index":454,"title":{},"body":{"classes/UserWish.html":{},"coverage.html":{}}}],["src/entity/user_wish.entity.ts:10",{"_index":461,"title":{},"body":{"classes/UserWish.html":{}}}],["src/entity/user_wish.entity.ts:14",{"_index":462,"title":{},"body":{"classes/UserWish.html":{}}}],["src/entity/user_wish.entity.ts:17",{"_index":457,"title":{},"body":{"classes/UserWish.html":{}}}],["src/entity/wish.entity",{"_index":505,"title":{},"body":{"controllers/WishController.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{}}}],["src/entity/wish.entity.ts",{"_index":476,"title":{},"body":{"classes/Wish.html":{},"coverage.html":{}}}],["src/entity/wish.entity.ts:6",{"_index":478,"title":{},"body":{"classes/Wish.html":{}}}],["src/entity/wish.entity.ts:9",{"_index":477,"title":{},"body":{"classes/Wish.html":{}}}],["src/main.ts",{"_index":566,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":630,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":633,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":635,"title":{},"body":{"index.html":{}}}],["started",{"_index":610,"title":{"index.html":{}},"body":{}}],["starter",{"_index":623,"title":{},"body":{"index.html":{}}}],["statements",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":270,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["status",{"_index":375,"title":{},"body":{"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{}}}],["statuscode",{"_index":74,"title":{},"body":{"controllers/AppController.html":{}}}],["stay",{"_index":657,"title":{},"body":{"index.html":{}}}],["str",{"_index":279,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["strategy",{"_index":311,"title":{},"body":{"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{}}}],["string",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/Wish.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":316,"title":{},"body":{"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{}}}],["support",{"_index":648,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":668,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["test(@req",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["test(req",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["test:covsupport",{"_index":640,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":639,"title":{},"body":{"index.html":{}}}],["testadmin",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["testadmin(@req",{"_index":84,"title":{},"body":{"controllers/AppController.html":{}}}],["testadmin(req",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["tests",{"_index":637,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":646,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.loginbyaccesstokenfb(accesstoken",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginbyemailpassword(email",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.defaultsaltorround",{"_index":286,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["this.httpservice",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["this.jwtservice.sign({payload",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["this.logger.error(e",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["this.logger.log(response",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":403,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.userrepository.findone({where",{"_index":450,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":452,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userserivce.createnewuser(newuser",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["this.userserivce.findbyemail(email",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["this.wishrepository.delete(id",{"_index":547,"title":{},"body":{"injectables/WishService.html":{}}}],["this.wishrepository.find",{"_index":541,"title":{},"body":{"injectables/WishService.html":{}}}],["this.wishrepository.findone(id",{"_index":542,"title":{},"body":{"injectables/WishService.html":{}}}],["this.wishrepository.save(wish",{"_index":546,"title":{},"body":{"injectables/WishService.html":{}}}],["this.wishservice.createnewwish(createwishdto",{"_index":516,"title":{},"body":{"controllers/WishController.html":{}}}],["this.wishservice.deletewishbyid(id",{"_index":519,"title":{},"body":{"controllers/WishController.html":{}}}],["this.wishservice.getallwishes",{"_index":511,"title":{},"body":{"controllers/WishController.html":{}}}],["this.wishservice.getwishbyid(id",{"_index":514,"title":{},"body":{"controllers/WishController.html":{}}}],["this.wishservice.updatewishbyid(id",{"_index":522,"title":{},"body":{"controllers/WishController.html":{}}}],["throw",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/WishService.html":{}}}],["token",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["token's",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["topromise",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["touch",{"_index":658,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":406,"title":{},"body":{"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserWish.html":{}}}],["true})@joincolumn(undefined",{"_index":460,"title":{},"body":{"classes/UserWish.html":{}}}],["try",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["twitter",{"_index":664,"title":{},"body":{"index.html":{}}}],["type",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/CreateWishDto.html":{},"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateWishDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":428,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":436,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forfeature([wishrepository",{"_index":530,"title":{},"body":{"modules/WishModule.html":{}}}],["typeormmodule.forroot",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":622,"title":{},"body":{"index.html":{}}}],["ui",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":424,"title":{},"body":{"classes/User.html":{},"miscellaneous/functions.html":{}}}],["unit",{"_index":636,"title":{},"body":{"index.html":{}}}],["updatewishbyid",{"_index":486,"title":{},"body":{"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["updatewishbyid(@param(\"id",{"_index":521,"title":{},"body":{"controllers/WishController.html":{}}}],["updatewishbyid(id",{"_index":496,"title":{},"body":{"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["updatewishdto",{"_index":411,"title":{"classes/UpdateWishDto.html":{}},"body":{"classes/UpdateWishDto.html":{},"controllers/WishController.html":{},"injectables/WishService.html":{},"coverage.html":{}}}],["updatewishdto.content",{"_index":548,"title":{},"body":{"injectables/WishService.html":{}}}],["urlgraphapi",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["useguards",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(authguard(\"facebook",{"_index":70,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":205,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{},"classes/PayloadJwtDto.html":{},"interfaces/ReponseGraphApi.html":{},"interfaces/RequestFBUser.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/UserWish.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.entity",{"_index":466,"title":{},"body":{"classes/UserWish.html":{}}}],["user.password",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/UserService.html":{}}}],["user/user.module",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["user?.role",{"_index":410,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user_id",{"_index":473,"title":{},"body":{"classes/UserWish.html":{}}}],["user_wish",{"_index":469,"title":{},"body":{"classes/UserWish.html":{}}}],["userid",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{}}}],["usermodule",{"_index":159,"title":{"modules/UserModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userrepository",{"_index":433,"title":{"classes/UserRepository.html":{}},"body":{"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userserivce",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["userservice",{"_index":187,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwish",{"_index":453,"title":{"classes/UserWish.html":{}},"body":{"classes/UserWish.html":{},"coverage.html":{}}}],["uuid",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/UserService.html":{}}}],["v4",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{},"injectables/UserService.html":{}}}],["validate",{"_index":298,"title":{},"body":{"injectables/FacebookStrategy.html":{},"classes/JwtStrategy.html":{}}}],["validate(accesstoken",{"_index":300,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["validate(payload",{"_index":339,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["validator",{"_index":296,"title":{},"body":{"classes/CreateWishDto.html":{},"classes/RequestLoginByAcessTokenFBDto.html":{},"classes/RequestLoginByEmailPasswordDto.html":{},"classes/UpdateWishDto.html":{},"dependencies.html":{}}}],["value",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"classes/BCryptUtils.html":{},"classes/ResponseDto.html":{},"classes/ResponseTokenDto.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":677,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":307,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["watch",{"_index":631,"title":{},"body":{"index.html":{}}}],["website",{"_index":662,"title":{},"body":{"index.html":{}}}],["wish",{"_index":456,"title":{"classes/Wish.html":{}},"body":{"classes/UserWish.html":{},"classes/Wish.html":{},"controllers/WishController.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{},"coverage.html":{}}}],["wish.content",{"_index":544,"title":{},"body":{"injectables/WishService.html":{}}}],["wish.dto",{"_index":508,"title":{},"body":{"controllers/WishController.html":{},"injectables/WishService.html":{}}}],["wish.dto.ts",{"_index":291,"title":{},"body":{"classes/CreateWishDto.html":{},"classes/UpdateWishDto.html":{},"coverage.html":{}}}],["wish.dto.ts:6",{"_index":294,"title":{},"body":{"classes/CreateWishDto.html":{},"classes/UpdateWishDto.html":{}}}],["wish.entity",{"_index":467,"title":{},"body":{"classes/UserWish.html":{}}}],["wish_id",{"_index":475,"title":{},"body":{"classes/UserWish.html":{}}}],["wishcontroller",{"_index":479,"title":{"controllers/WishController.html":{}},"body":{"controllers/WishController.html":{},"modules/WishModule.html":{},"coverage.html":{}}}],["wishmodule",{"_index":102,"title":{"modules/WishModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WishModule.html":{},"modules.html":{},"overview.html":{}}}],["wishrepository",{"_index":527,"title":{"classes/WishRepository.html":{}},"body":{"modules/WishModule.html":{},"classes/WishRepository.html":{},"injectables/WishService.html":{},"coverage.html":{}}}],["wishservice",{"_index":503,"title":{"injectables/WishService.html":{}},"body":{"controllers/WishController.html":{},"modules/WishModule.html":{},"injectables/WishService.html":{},"coverage.html":{},"overview.html":{}}}],["world",{"_index":121,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ReponseGraphApi.html":{}}}],["yes",{"_index":283,"title":{},"body":{"classes/BCryptUtils.html":{}}}],["you'd",{"_index":651,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules/WishModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookLogin\n                            \n                            \n                                    Async\n                                facebookLoginRedirect\n                            \n                            \n                                getHello\n                            \n                            \n                                getNo\n                            \n                            \n                                getProfile\n                            \n                            \n                                    Async\n                                test\n                            \n                            \n                                    Public\n                                testAdmin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            facebookLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/facebook')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            facebookLoginRedirect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLoginRedirect(req: RequestFBUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/facebook/redirect')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                RequestFBUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNo\n                        \n                        \n                    \n                \n            \n            \n                \ngetNo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('no')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            test\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    test(req: RequestFBUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/testLoginByFacebook')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                RequestFBUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            testAdmin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    testAdmin(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/admin')@Auth(RoleEnum.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpStatus, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AppService } from './app.service';\nimport { Auth } from './common/decorator/auth.decorator';\nimport { RequestFBUser } from './common/dto/RequestFBUser.interface';\nimport { RoleEnum } from './common/enum/role.enum';\nimport { JwtAuthGuard } from './common/guard/jwt-auth.guard';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get(\"/facebook\")\n  @UseGuards(AuthGuard(\"facebook\"))\n  async facebookLogin(): Promise {\n    return HttpStatus.OK;\n  }\n\n  @Get(\"/facebook/redirect\")\n  @UseGuards(AuthGuard(\"facebook\"))\n  async facebookLoginRedirect(@Req() req: RequestFBUser): Promise {\n    return {\n      statusCode: HttpStatus.OK,\n      data: req.user,\n    };\n  }\n\n  @Get(\"/testLoginByFacebook\")\n  @UseGuards(AuthGuard(\"facebook\"))\n  async test(@Req() req: RequestFBUser): Promise {\n    return {\n      statusCode: HttpStatus.OK,\n      data: req.user,\n    };\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Req() req) {\n    return req.user;\n  }\n\n  @Get('/admin')\n  @Auth(RoleEnum.ADMIN)\n  public testAdmin(@Req() req){\n    return req.user;\n  }\n\n  @Get(\"no\")\n  getNo() {\n    return \"no\";\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nWishModule\n\nWishModule\n\nAppModule -->\n\nWishModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAppModule -->\n\nFacebookStrategy->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            FacebookStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            WishModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './core/auth/auth.module';\nimport { FacebookStrategy } from './common/strategy/facebook.strategy';\nimport { WishModule } from './core/wish/wish.module';\n\n@Module({\n  imports: [TypeOrmModule.forRoot(), AuthModule, WishModule],\n  controllers: [AppController],\n  providers: [AppService, FacebookStrategy],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/v1/auth/controller/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                loginByAccessTokenFb\n                            \n                            \n                                    Public\n                                loginByEmailPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loginByAccessTokenFb\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginByAccessTokenFb(request: RequestLoginByAcessTokenFBDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login-fb')\n                \n            \n\n            \n                \n                    Defined in src/api/v1/auth/controller/auth.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestLoginByAcessTokenFBDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loginByEmailPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginByEmailPassword(request: RequestLoginByEmailPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login-account')\n                \n            \n\n            \n                \n                    Defined in src/api/v1/auth/controller/auth.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestLoginByEmailPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from \"@nestjs/common\";\nimport { ResponseTokenDto } from \"src/core/auth/dto/ResponseToken.dto\";\nimport { RequestLoginByAcessTokenFBDto } from \"../dto/RequestLoginByAcessTokenFB.dto\";\nimport { RequestLoginByEmailPasswordDto } from \"../dto/RequestLoginByEmailPassword.dto\";\nimport {AuthService} from \"./../../../../core/auth/service/auth.service\";\n\n@Controller(\"/api/v1/auth\")\nexport class AuthController {\n\n    constructor(private readonly authService: AuthService) {}\n    \n    @Post(\"/login-fb\")\n    public loginByAccessTokenFb (@Body() request : RequestLoginByAcessTokenFBDto): Promise {\n        const {userID, accessToken} = request;\n        return this.authService.loginByAccessTokenFb(accessToken, userID);\n    }\n\n    @Post(\"/login-account\")\n    public loginByEmailPassword(@Body() request: RequestLoginByEmailPasswordDto): Promise {\n        const {email, password} = request;\n        return this.authService.loginByEmailPassword(email, password);\n    }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule, Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from 'src/api/v1/auth/controller/auth.controller';\nimport { JwtStrategy } from 'src/common/strategy/jwt.strategy';\nimport { UserModule } from '../user/user.module';\nimport { AuthService } from './service/auth.service';\n\n// ! FIX: env is not intergrated\nconsole.log(process.env.JWT_SECRETKEY)\n@Module({\n    imports: [HttpModule, UserModule, JwtModule.register({\n        secret: \"asdfalsfjdlaskfdj\",\n        signOptions: {expiresIn: '30d'}\n    })],\n    controllers: [AuthController],\n    providers: [AuthService, JwtStrategy]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/service/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                loginByAccessTokenFb\n                            \n                            \n                                    Public\n                                    Async\n                                loginByEmailPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, userSerivce: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/service/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userSerivce\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            loginByAccessTokenFb\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginByAccessTokenFb(accessToken: string, userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/auth/service/auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            loginByEmailPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginByEmailPassword(email: string, pwd: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/auth/service/auth.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pwd\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger(AuthService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/core/auth/service/auth.service.ts:20\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, HttpService, Injectable, InternalServerErrorException, Logger, NotFoundException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { map } from 'rxjs/operators';\nimport { UserService } from 'src/core/user/service/user.service';\nimport { User } from 'src/entity/user.entity';\nimport { ResponseTokenDto } from '../dto/ResponseToken.dto';\nimport { v4 as uuidv4 } from 'uuid';\nimport { BCryptUtils } from 'src/common/util/bcrypt.util';\ninterface ReponseGraphApi {\n    id: string;\n    name: string;\n    email: string;\n    first_name: string;\n    last_name: string;\n}\n\n@Injectable()\nexport class AuthService {\n\n    private readonly logger:Logger = new Logger(AuthService.name);\n\n    constructor(private readonly httpService: HttpService,\n                private readonly userSerivce: UserService,\n                private readonly jwtService: JwtService) {}\n\n    \n    public async loginByAccessTokenFb\n            (accessToken: string, userID: string): Promise {\n\n        try {\n            const urlGraphApi: string = `https://graph.facebook.com/v9.0/${userID}?fields=id,name,email,first_name,last_name&access_token=${accessToken}`;\n\n            const response: ReponseGraphApi = await this.httpService\n                            .get(urlGraphApi)\n                            .pipe(map(response => response.data))\n                            .toPromise();\n            this.logger.log(response);\n\n            const {id, name, email} = response;\n\n            if (!email) {\n                throw new BadRequestException(\"Access token's permissions haven't email permission\");\n            }\n\n            const user: User = await this.userSerivce.findByEmail(email);\n\n            let token: string = '';\n\n            if (user != null) {\n                // signed token\n                const {password, ...data} = user;\n                token = this.jwtService.sign({payload: {user: data}});\n            } else {\n                const newUser: User = new User();\n                newUser.email = email;\n                newUser.name = name;\n                newUser.password = uuidv4();\n                newUser.createdAt = new Date();\n\n                const insertedUser: User = await this.userSerivce.createNewUser(newUser);\n                // signed token\n                const {password, ...data} = insertedUser;\n                token = this.jwtService.sign({payload: {user: data}});\n            }\n\n            const responseTokenDto = new ResponseTokenDto();\n            responseTokenDto.data = {token};\n            return responseTokenDto;\n            \n        } catch (e) {\n            console.log(e);\n            this.logger.error(e);\n            if (e.response.status == 400) {\n                throw new BadRequestException(e.message);\n            }\n            throw new InternalServerErrorException(e.message);\n        }\n        \n    }\n\n    public async loginByEmailPassword(email: string, pwd: string): Promise {\n        const user: User = await this.userSerivce.findByEmail(email);\n\n        if (user == null) {\n            throw new NotFoundException(\"Email hasn't been found\");\n        }\n\n        const isEqual: boolean = await BCryptUtils.compare(pwd, user.password);\n\n        if (!isEqual) {\n            throw new NotFoundException(\"Email/Password wrong\");\n        }\n\n        // sign token\n        const {password, ...data} = user;\n        const token: string = this.jwtService.sign({payload: {user: data}});\n        const responseTokenDto = new ResponseTokenDto();\n        responseTokenDto.data = {token};\n        return responseTokenDto;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BCryptUtils.html":{"url":"classes/BCryptUtils.html","title":"class - BCryptUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BCryptUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util/bcrypt.util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                defaultSaltOrRound\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                compare\n                            \n                            \n                                    Static\n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            defaultSaltOrRound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/common/util/bcrypt.util.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            compare\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(str: string, hash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util/bcrypt.util.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            hash\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hash(str: string, saltOrRound?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/util/bcrypt.util.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    saltOrRound\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\n\nexport class BCryptUtils {\n\n    private static defaultSaltOrRound: number = 10;\n\n    public static async hash(str: string, saltOrRound ?: number): Promise {\n        let round = this.defaultSaltOrRound;\n        if (saltOrRound) {\n            round = saltOrRound;\n        }\n\n        return bcrypt.hash(str, round);\n    }\n\n    public static async compare(str: string, hash: string): Promise {\n        return bcrypt.compare(str, hash);\n    }\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateWishDto.html":{"url":"classes/CreateWishDto.html","title":"class - CreateWishDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateWishDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/v1/wish/dto/create-wish.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/v1/wish/dto/create-wish.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MinLength } from \"class-validator\";\n\nexport class CreateWishDto {\n\n    @MinLength(5)\n    content: string;\n    \n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookStrategy.html":{"url":"injectables/FacebookStrategy.html","title":"injectable - FacebookStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FacebookStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/strategy/facebook.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/strategy/facebook.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: (err: any,user: any,info: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/common/strategy/facebook.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                            Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Profile, Strategy } from \"passport-facebook\";\n\n@Injectable()\nexport class FacebookStrategy extends PassportStrategy(Strategy, \"facebook\") {\n  constructor() {\n    super({\n      clientID: process.env.APP_ID,\n      clientSecret: process.env.APP_SECRET,\n      callbackURL: \"http://localhost:3000/facebook/redirect\",\n      scope: \"email\",\n      profileFields: [\"emails\", \"name\"],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: Profile,\n    done: (err: any, user: any, info?: any) => void\n  ): Promise {\n    const { name, emails, photos } = profile;\n    const user = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      photos: photos\n    };\n\n    const payload = {\n      user,\n      accessToken,\n    };\n\n    done(null, payload);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guard/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtStrategy.html":{"url":"classes/JwtStrategy.html","title":"class - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/strategy/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: PayloadJwtDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/strategy/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PayloadJwtDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { User } from \"src/entity/user.entity\";\nimport { PayloadJwtDto } from \"../dto/payload-jwt.dto\";\n\nexport class JwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n\n    constructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: \"asdfalsfjdlaskfdj\",\n        });\n    }\n\n    async validate(payload: PayloadJwtDto) {\n        return payload;\n    }\n    \n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtUtils.html":{"url":"classes/JwtUtils.html","title":"class - JwtUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/util/jwt.util.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class JwtUtils {\n    \n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PayloadJwtDto.html":{"url":"classes/PayloadJwtDto.html","title":"class - PayloadJwtDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PayloadJwtDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/payload-jwt.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/payload-jwt.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { RoleEnum } from \"../enum/role.enum\";\n\nexport class PayloadJwtDto {\n    user: {\n        id: number;\n        name: string;\n        email: string;\n        createdAt: Date;\n        role: RoleEnum\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReponseGraphApi.html":{"url":"interfaces/ReponseGraphApi.html","title":"interface - ReponseGraphApi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ReponseGraphApi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/service/auth.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        first_name\n                                \n                                \n                                        id\n                                \n                                \n                                        last_name\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        first_name\n                                    \n                                \n                                \n                                    \n                                        first_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        last_name\n                                    \n                                \n                                \n                                    \n                                        last_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BadRequestException, HttpService, Injectable, InternalServerErrorException, Logger, NotFoundException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { map } from 'rxjs/operators';\nimport { UserService } from 'src/core/user/service/user.service';\nimport { User } from 'src/entity/user.entity';\nimport { ResponseTokenDto } from '../dto/ResponseToken.dto';\nimport { v4 as uuidv4 } from 'uuid';\nimport { BCryptUtils } from 'src/common/util/bcrypt.util';\ninterface ReponseGraphApi {\n    id: string;\n    name: string;\n    email: string;\n    first_name: string;\n    last_name: string;\n}\n\n@Injectable()\nexport class AuthService {\n\n    private readonly logger:Logger = new Logger(AuthService.name);\n\n    constructor(private readonly httpService: HttpService,\n                private readonly userSerivce: UserService,\n                private readonly jwtService: JwtService) {}\n\n    \n    public async loginByAccessTokenFb\n            (accessToken: string, userID: string): Promise {\n\n        try {\n            const urlGraphApi: string = `https://graph.facebook.com/v9.0/${userID}?fields=id,name,email,first_name,last_name&access_token=${accessToken}`;\n\n            const response: ReponseGraphApi = await this.httpService\n                            .get(urlGraphApi)\n                            .pipe(map(response => response.data))\n                            .toPromise();\n            this.logger.log(response);\n\n            const {id, name, email} = response;\n\n            if (!email) {\n                throw new BadRequestException(\"Access token's permissions haven't email permission\");\n            }\n\n            const user: User = await this.userSerivce.findByEmail(email);\n\n            let token: string = '';\n\n            if (user != null) {\n                // signed token\n                const {password, ...data} = user;\n                token = this.jwtService.sign({payload: {user: data}});\n            } else {\n                const newUser: User = new User();\n                newUser.email = email;\n                newUser.name = name;\n                newUser.password = uuidv4();\n                newUser.createdAt = new Date();\n\n                const insertedUser: User = await this.userSerivce.createNewUser(newUser);\n                // signed token\n                const {password, ...data} = insertedUser;\n                token = this.jwtService.sign({payload: {user: data}});\n            }\n\n            const responseTokenDto = new ResponseTokenDto();\n            responseTokenDto.data = {token};\n            return responseTokenDto;\n            \n        } catch (e) {\n            console.log(e);\n            this.logger.error(e);\n            if (e.response.status == 400) {\n                throw new BadRequestException(e.message);\n            }\n            throw new InternalServerErrorException(e.message);\n        }\n        \n    }\n\n    public async loginByEmailPassword(email: string, pwd: string): Promise {\n        const user: User = await this.userSerivce.findByEmail(email);\n\n        if (user == null) {\n            throw new NotFoundException(\"Email hasn't been found\");\n        }\n\n        const isEqual: boolean = await BCryptUtils.compare(pwd, user.password);\n\n        if (!isEqual) {\n            throw new NotFoundException(\"Email/Password wrong\");\n        }\n\n        // sign token\n        const {password, ...data} = user;\n        const token: string = this.jwtService.sign({payload: {user: data}});\n        const responseTokenDto = new ResponseTokenDto();\n        responseTokenDto.data = {token};\n        return responseTokenDto;\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestFBUser.html":{"url":"interfaces/RequestFBUser.html","title":"interface - RequestFBUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RequestFBUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/RequestFBUser.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:         Object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RequestFBUser extends Request {\n    user: Object;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestLoginByAcessTokenFBDto.html":{"url":"classes/RequestLoginByAcessTokenFBDto.html","title":"class - RequestLoginByAcessTokenFBDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestLoginByAcessTokenFBDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/v1/auth/dto/RequestLoginByAcessTokenFB.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                userID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accessToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/v1/auth/dto/RequestLoginByAcessTokenFB.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/v1/auth/dto/RequestLoginByAcessTokenFB.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MinLength } from \"class-validator\";\n\nexport class RequestLoginByAcessTokenFBDto {\n    @MinLength(1)\n    userID: string;\n\n    @MinLength(1)\n    accessToken: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestLoginByEmailPasswordDto.html":{"url":"classes/RequestLoginByEmailPasswordDto.html","title":"class - RequestLoginByEmailPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestLoginByEmailPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/v1/auth/dto/RequestLoginByEmailPassword.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/v1/auth/dto/RequestLoginByEmailPassword.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/v1/auth/dto/RequestLoginByEmailPassword.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, MinLength } from \"class-validator\";\n\nexport class RequestLoginByEmailPasswordDto {\n    @IsEmail()\n    email;\n\n    @MinLength(8)\n    password;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseDto.html":{"url":"classes/ResponseDto.html","title":"class - ResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/response.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                message\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Object\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/response.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"No message\"\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/response.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : HttpStatus.ACCEPTED\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/response.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from \"@nestjs/common\";\n\nexport class ResponseDto {\n    status: number = HttpStatus.ACCEPTED;\n    data: Object;\n    message: string = \"No message\";\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseTokenDto.html":{"url":"classes/ResponseTokenDto.html","title":"class - ResponseTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/dto/ResponseToken.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ResponseDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                message\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Object\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ResponseDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         ResponseDto:5\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"No message\"\n                        \n                    \n                            \n                                \n                                    Inherited from         ResponseDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         ResponseDto:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : HttpStatus.ACCEPTED\n                        \n                    \n                            \n                                \n                                    Inherited from         ResponseDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         ResponseDto:4\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ResponseDto } from \"src/common/dto/response.dto\";\n\nexport class ResponseTokenDto extends ResponseDto {\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guard/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guard/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guard/roles.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorator/role.decorator';\nimport { RoleEnum } from '../enum/role.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const req = context.switchToHttp().getRequest();\n    const user = req?.user?.payload?.user;\n    return requiredRoles.some((role) => user?.role == role);\n  }\n}\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateWishDto.html":{"url":"classes/UpdateWishDto.html","title":"class - UpdateWishDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateWishDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/v1/wish/dto/update-wish.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/v1/wish/dto/update-wish.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MinLength } from \"class-validator\";\n\nexport class UpdateWishDto {\n\n    @MinLength(5)\n    content: string;\n    \n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/user.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Default value : new Date()\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/user.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/user.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/user.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/user.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/user.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RoleEnum\n\n                        \n                    \n                    \n                        \n                            Default value : RoleEnum.USER\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/user.entity.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { RoleEnum } from \"src/common/enum/role.enum\";\nimport { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @Column({unique: true})\n    email: string;\n\n    @Column()\n    password: string;\n\n    @Column()\n    createdAt: Date = new Date();\n\n    @Column({default: RoleEnum.USER})\n    role: RoleEnum = RoleEnum.USER;\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from './repository/user.repository';\nimport { UserService } from './service/user.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserRepository])],\n  controllers: [],\n  providers: [UserService],\n  exports: [UserService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/repository/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from \"src/entity/user.entity\";\nimport { EntityRepository, Repository } from \"typeorm\";\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/service/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createNewUser\n                            \n                            \n                                    Public\n                                findByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/service/user.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createNewUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/core/user/service/user.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/user/service/user.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { User } from 'src/entity/user.entity';\nimport { UserRepository } from '../repository/user.repository';\nimport * as bcrypt from 'bcrypt';\nimport { v4 as uuidv4 } from 'uuid';\n@Injectable()\nexport class UserService {\n\n    constructor(private readonly userRepository: UserRepository) {}\n\n    public findByEmail(email: string): Promise {\n        return this.userRepository.findOne({where: {email: email}});\n    }\n\n    public async createNewUser(user: User): Promise {\n        if (user.password == '' || user.password == null) {\n            user.password = uuidv4();\n        }\n        const hash = await bcrypt.hash(user.password, 10);\n        user.password = hash;\n        return this.userRepository.save(user);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWish.html":{"url":"classes/UserWish.html","title":"class - UserWish","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWish\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/user_wish.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gift\n                            \n                            \n                                user\n                            \n                            \n                                wish\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gift\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/user_wish.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, {primary: true})@JoinColumn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/user_wish.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wish\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Wish\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, {primary: true})@JoinColumn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/user_wish.entity.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Check, Column, Entity, JoinColumn, ManyToOne } from \"typeorm\";\nimport { User } from \"./user.entity\";\nimport { Wish } from \"./wish.entity\";\n\n@Entity({name: \"user_wish\"})\n@Check(`\"gift\" IN (10, 20)`)\nexport class UserWish {\n    @ManyToOne(() => User, {primary: true})\n    @JoinColumn([{name: 'user_id', referencedColumnName: 'id'}])\n    user: User;\n\n    @ManyToOne(() => Wish, {primary: true})\n    @JoinColumn([{name: 'wish_id', referencedColumnName: 'id'}])\n    wish: Wish;\n\n    @Column()\n    gift: number;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Wish.html":{"url":"classes/Wish.html","title":"class - Wish","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Wish\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/wish.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/wish.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entity/wish.entity.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class Wish {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    content: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WishController.html":{"url":"controllers/WishController.html","title":"controller - WishController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WishController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/v1/wish/controller/wish.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/wishes\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createNewWish\n                            \n                            \n                                    Public\n                                deleteWishById\n                            \n                            \n                                    Public\n                                getAllWishes\n                            \n                            \n                                    Public\n                                getWishById\n                            \n                            \n                                    Public\n                                updateWishById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createNewWish\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewWish(createWishDto: CreateWishDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/api/v1/wish/controller/wish.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createWishDto\n                                    \n                                                CreateWishDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteWishById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteWishById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/api/v1/wish/controller/wish.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getAllWishes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllWishes()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/api/v1/wish/controller/wish.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getWishById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWishById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/api/v1/wish/controller/wish.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateWishById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWishById(id: number, updateWishDto: UpdateWishDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/api/v1/wish/controller/wish.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateWishDto\n                                    \n                                                UpdateWishDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Patch, Post } from '@nestjs/common';\nimport { Auth } from 'src/common/decorator/auth.decorator';\nimport { RoleEnum } from 'src/common/enum/role.enum';\nimport { WishService } from 'src/core/wish/service/wish.service';\nimport { Wish } from 'src/entity/wish.entity';\nimport { DeleteResult } from 'typeorm';\nimport { CreateWishDto } from '../dto/create-wish.dto';\nimport { UpdateWishDto } from '../dto/update-wish.dto';\n\n@Controller('/api/v1/wishes')\n@Auth(RoleEnum.ADMIN)\nexport class WishController {\n\n    constructor(private readonly wishService: WishService) {}\n\n    @Get()\n    public getAllWishes(): Promise {\n        return this.wishService.getAllWishes();\n    }\n\n    @Get(\":id\")\n    public getWishById(@Param(\"id\") id: number): Promise {\n        return this.wishService.getWishById(id);\n    }\n\n    @Post()\n    public createNewWish(@Body() createWishDto: CreateWishDto): Promise {\n        return this.wishService.createNewWish(createWishDto);\n    }\n\n    @Delete(\":id\")\n    public deleteWishById(@Param(\"id\") id: number): Promise {\n        return this.wishService.deleteWishById(id);\n    }\n\n    @Patch(\":id\")\n    public updateWishById(@Param(\"id\") id: number, @Body() updateWishDto: UpdateWishDto): Promise {\n        return this.wishService.updateWishById(id, updateWishDto);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WishModule.html":{"url":"modules/WishModule.html","title":"module - WishModule","body":"\n                   \n\n\n\n\n    Modules\n    WishModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_WishModule\n\n\n\ncluster_WishModule_providers\n\n\n\n\nWishService\n\nWishService\n\n\n\nWishModule\n\nWishModule\n\nWishModule -->\n\nWishService->WishModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/wish/wish.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WishService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WishController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { WishController } from 'src/api/v1/wish/controller/wish.controller';\nimport { WishRepository } from './repository/wish.repository';\nimport { WishService } from './service/wish.service';\n\n@Module({\n    imports: [TypeOrmModule.forFeature([WishRepository])],\n    controllers: [WishController],\n    providers: [WishService]\n})\nexport class WishModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WishRepository.html":{"url":"classes/WishRepository.html","title":"class - WishRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WishRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/wish/repository/wish.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Wish } from \"src/entity/wish.entity\";\nimport { EntityRepository, Repository } from \"typeorm\";\n\n@EntityRepository(Wish)\nexport class WishRepository extends Repository {\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WishService.html":{"url":"injectables/WishService.html","title":"injectable - WishService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  WishService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/wish/service/wish.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createNewWish\n                            \n                            \n                                    Public\n                                    Async\n                                deleteWishById\n                            \n                            \n                                    Public\n                                getAllWishes\n                            \n                            \n                                    Public\n                                    Async\n                                getWishById\n                            \n                            \n                                    Public\n                                    Async\n                                updateWishById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(wishRepository: WishRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/wish/service/wish.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        wishRepository\n                                                  \n                                                        \n                                                                        WishRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createNewWish\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewWish(createWishDto: CreateWishDto)\n                \n            \n\n\n            \n                \n                    Defined in src/core/wish/service/wish.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createWishDto\n                                    \n                                                CreateWishDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteWishById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteWishById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/wish/service/wish.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getAllWishes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllWishes()\n                \n            \n\n\n            \n                \n                    Defined in src/core/wish/service/wish.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getWishById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWishById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/wish/service/wish.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateWishById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWishById(id: number, updateWishDto: UpdateWishDto)\n                \n            \n\n\n            \n                \n                    Defined in src/core/wish/service/wish.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateWishDto\n                                    \n                                                UpdateWishDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateWishDto } from 'src/api/v1/wish/dto/create-wish.dto';\nimport { UpdateWishDto } from 'src/api/v1/wish/dto/update-wish.dto';\nimport { Wish } from 'src/entity/wish.entity';\nimport { DeleteResult } from 'typeorm';\nimport { WishRepository } from '../repository/wish.repository';\n\n@Injectable()\nexport class WishService {\n\n    constructor(private readonly wishRepository: WishRepository) {}\n\n    public getAllWishes(): Promise {\n        return this.wishRepository.find();\n    }\n\n    public async getWishById(id: number): Promise {\n        const wish: Wish = await this.wishRepository.findOne(id);\n        if (!wish) {\n            throw new NotFoundException(\"id is not found\")\n        }\n        return wish;\n    }\n\n    public createNewWish(createWishDto: CreateWishDto): Promise {\n        const wish: Wish = new Wish();\n        wish.content = createWishDto.content;\n        return this.wishRepository.save(wish);\n    }\n\n    public async deleteWishById(id: number): Promise {\n        return this.wishRepository.delete(id);\n    }\n\n    public async updateWishById(id: number, updateWishDto: UpdateWishDto): Promise {\n        const wish: Wish = await this.wishRepository.findOne(id);\n\n        if (!wish) {\n            throw new NotFoundException(\"id is not found\")\n        }\n\n        wish.content = updateWishDto.content;\n        \n        return this.wishRepository.save(wish);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/api/v1/auth/controller/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/v1/auth/dto/RequestLoginByAcessTokenFB.dto.ts\n            \n            class\n            RequestLoginByAcessTokenFBDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/v1/auth/dto/RequestLoginByEmailPassword.dto.ts\n            \n            class\n            RequestLoginByEmailPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/v1/wish/controller/wish.controller.ts\n            \n            controller\n            WishController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/api/v1/wish/dto/create-wish.dto.ts\n            \n            class\n            CreateWishDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/v1/wish/dto/update-wish.dto.ts\n            \n            class\n            UpdateWishDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/decorator/auth.decorator.ts\n            \n            function\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/role.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/role.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dto/RequestFBUser.interface.ts\n            \n            interface\n            RequestFBUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/dto/payload-jwt.dto.ts\n            \n            class\n            PayloadJwtDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/dto/response.dto.ts\n            \n            class\n            ResponseDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/guard/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guard/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/strategy/facebook.strategy.ts\n            \n            injectable\n            FacebookStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/strategy/jwt.strategy.ts\n            \n            class\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util/bcrypt.util.ts\n            \n            class\n            BCryptUtils\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/util/jwt.util.ts\n            \n            class\n            JwtUtils\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/auth/dto/ResponseToken.dto.ts\n            \n            class\n            ResponseTokenDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/auth/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/auth/service/auth.service.ts\n            \n            interface\n            ReponseGraphApi\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/user/repository/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/user/service/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/wish/repository/wish.repository.ts\n            \n            class\n            WishRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/wish/service/wish.service.ts\n            \n            injectable\n            WishService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/entity/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/entity/user_wish.entity.ts\n            \n            class\n            UserWish\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entity/wish.entity.ts\n            \n            class\n            Wish\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/swagger : ^4.7.12\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.2\n        \n            class-validator : ^0.13.1\n        \n            dotenv : ^8.2.0\n        \n            mysql2 : ^2.2.5\n        \n            passport : ^0.4.1\n        \n            passport-facebook : ^3.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.30\n        \n            uuid : ^8.3.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RoleEnum   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enum/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        RoleEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorator/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Auth\n                        \n                        \n                    \n                \n            \n            \n                \nAuth(...roles: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WishModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_WishModule\n\n\n\ncluster_WishModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nWishModule\n\nWishModule\n\nAppModule -->\n\nWishModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAppModule -->\n\nFacebookStrategy->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nWishService\n\nWishService\n\nWishModule -->\n\nWishService->WishModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../role.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorator/role.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: RoleEnum[]) => SetMetadata(ROLES_KEY, roles)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'roles'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
